#!/usr/bin/env bash
# 20240715_0141_est_EJR
# btcV2
#=== bash functions ======================================================================================
jumpto() { local LV1=$1; local LV2=$(sed -n "/$LV1:/{:a;n;p;ba};" $0 | grep -v ':$'); sleep .1; eval "$LV2"; exit; }
crap() { sleep .2; read -n 1 -p '*ANY-KEY*'; echo; }

toclip() { echo -n "$1" | xclip -selection clipboard; }
ClipQrToTxt() { xclip -selection clipboard -t image/png -o > /tmp/ClipQrToTxt.png; local Out=$(zbarimg --quiet --raw /tmp/ClipQrToTxt.png); echo "$Out"; rm /tmp/ClipQrToTxt.png; }
ClipTxtToQr() { local In1=$(xclip -o -selection clipboard); if [ -z "$In1" ]; then echo "Clipboard is empty."; return 1; fi; local Out=$(qrencode -m 2 -t utf8 <<< "$In1"); echo "$Out"; }
ClipTxtToB64() { local In=$(xclip -o -selection clipboard); if [ -z "$In" ]; then echo "Clipboard is empty."; return 1; fi; local Out=$(echo -n "$In" | base64); echo -n "$Out"; }
ClipB64ToTxt() { local In=$(xclip -o -selection clipboard); if [ -z "$In" ]; then echo "Clipboard is empty."; return 1; fi; local Out=$(echo -n "$In" | base64 -d); echo -n "$Out"; }

CamQrToTxt() { local tfile="/tmp/CamQrToTxt.txt"; test_webcam() { ffmpeg -f v4l2 -i "$1" -frames:v 1 -f rawvideo -y /dev/null &> /dev/null; if [ $? -eq 0 ]; then return 0; fi; return 1; }; capture_and_decode_qr() { zbarcam --raw "$1" > "$tfile" & zbarcam_pid=$!; while true; do if [ -s "$tfile" ]; then qr_text=$(cat "$tfile"); rm "$tfile"; kill $zbarcam_pid; echo "$qr_text"; return 0; fi; sleep 1; done; return 1; }; found_any=false; for device in /dev/video*; do if [ -e "$device" ]; then if test_webcam "$device"; then found_any=true; qr_text=$(capture_and_decode_qr "$device"); if [ $? -eq 0 ]; then echo "$qr_text"; return 0; fi; fi; fi; done; if ! $found_any; then echo "No working webcam found."; return 1; fi; return 0; }

balnvol() { local ADDRESS="$1"; local RESPONSE=$(curl -sSL "https://mempool.space/api/address/$ADDRESS"); local TOTAL_RECEIVED=$(echo "$RESPONSE" | jq -r '.chain_stats.funded_txo_sum'); local SPENT=$(echo "$RESPONSE" | jq -r '.chain_stats.spent_txo_sum'); local BALANCE=$((TOTAL_RECEIVED - SPENT)); TOTAL_RECEIVED_BTC=$(echo "scale=8; $TOTAL_RECEIVED / 100000000" | bc); BALANCE_BTC=$(echo "scale=8; $BALANCE / 100000000" | bc); echo -e " BAL= $BALANCE_BTC\n VOL= $TOTAL_RECEIVED_BTC"; }
change_version_bytes() { local ext_key="$1"; local new_version="$2"; local decoded_hex=$(echo "$ext_key" | base58 -d | xxd -p -c 256); local new_hex="${new_version}${decoded_hex:8}"; echo "$new_hex" | xxd -r -p | base58; }
WIF_TO_Hex64() { local IN="$1"; local OUT; OUT=$(echo -n "$IN" | base58 -d | xxd -p | tr -d '\n\\'); OUT=${OUT,,}; OUT=${OUT:2}; OUT=${OUT:0:64}; echo -n "$OUT"; }
Str_TO_Hex64() { echo -n "$1" | sha256sum | awk '{print $1}'; }

Hex64_TO_yprv() { local xprv=$(Hex64_TO_xprv "$1"); change_version_bytes "$xprv" "049d7878"; }
Hex64_TO_zprv() { local xprv=$(Hex64_TO_xprv "$1"); change_version_bytes "$xprv" "04b2430c"; }

Hex64_TO_ypub() { local xpub=$(Hex64_TO_xpub "$1"); change_version_bytes "$xpub" "049d7cb2"; }
Hex64_TO_zpub() { local xpub=$(Hex64_TO_xpub "$1"); change_version_bytes "$xpub" "04b24746"; }


words2xprv() { local in="${1,,}"; local pbkdf2=$(words2pbkdf2 "$in"); local s1='0488ade4000000000000000000'; local s2=$(echo "$pbkdf2" | cut -c 65-128); local s3='00'; local s4=$(echo "$pbkdf2" | cut -c 1-64); local s5=$(echo -n "$s1$s2$s3$s4" | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | xxd -p -c 64 | head -c 8); local prv=$(echo -n "$s1$s2$s3$s4$s5" | xxd -r -p | base58); echo "$prv"; }
words2yprv() { local in="${1,,}"; local pbkdf2=$(words2pbkdf2 "$in"); local s1='049d7878000000000000000000'; local s2=$(echo "$pbkdf2" | cut -c 65-128); local s3='00'; local s4=$(echo "$pbkdf2" | cut -c 1-64); local s5=$(echo -n "$s1$s2$s3$s4" | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | xxd -p -c 64 | head -c 8); local prv=$(echo -n "$s1$s2$s3$s4$s5" | xxd -r -p | base58); echo "$prv"; }
words2zprv() { local in="${1,,}"; local pbkdf2=$(words2pbkdf2 "$in"); local s1='04b2430c000000000000000000'; local s2=$(echo "$pbkdf2" | cut -c 65-128); local s3='00'; local s4=$(echo "$pbkdf2" | cut -c 1-64); local s5=$(echo -n "$s1$s2$s3$s4" | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | xxd -p -c 64 | head -c 8); local prv=$(echo -n "$s1$s2$s3$s4$s5" | xxd -r -p | base58); echo "$prv"; }

words2xpub() { local in="${1,,}"; local pbkdf2=$(words2pbkdf2 "$in"); local s1='0488b21e000000000000000000'; local s2=$(echo "$pbkdf2" | cut -c 65-128); local s3=''; local t=$(echo "$pbkdf2" | cut -c 1-64); local s4=$(Hex64_TO_PubKeyHex66 "$t"); local s5=$(echo -n "$s1$s2$s3$s4" | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | xxd -p -c 64 | head -c 8); local pub=$(echo -n "$s1$s2$s3$s4$s5" | xxd -r -p | base58); echo "$pub"; }
words2ypub() { local in="${1,,}"; local pbkdf2=$(words2pbkdf2 "$in"); local s1='049d7cb2000000000000000000'; local s2=$(echo "$pbkdf2" | cut -c 65-128); local s3=''; local t=$(echo "$pbkdf2" | cut -c 1-64); local s4=$(Hex64_TO_PubKeyHex66 "$t"); local s5=$(echo -n "$s1$s2$s3$s4" | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | xxd -p -c 64 | head -c 8); local pub=$(echo -n "$s1$s2$s3$s4$s5" | xxd -r -p | base58); echo "$pub"; }
words2zpub() { local in="${1,,}"; local pbkdf2=$(words2pbkdf2 "$in"); local s1='04b24746000000000000000000'; local s2=$(echo "$pbkdf2" | cut -c 65-128); local s3=''; local t=$(echo "$pbkdf2" | cut -c 1-64); local s4=$(Hex64_TO_PubKeyHex66 "$t"); local s5=$(echo -n "$s1$s2$s3$s4" | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 -binary | xxd -p -c 64 | head -c 8); local pub=$(echo -n "$s1$s2$s3$s4$s5" | xxd -r -p | base58); echo "$pub"; }
words2pub() { local in="${1,,}"; local pbkdf2=$(words2pbkdf2 "$in"); local prv=$(echo "$pbkdf2" | cut -c 1-64); local pub=$(Hex64_TO_PubKeyHex66 "$prv"); echo "$pub"; }

Hex64_TO_WIF() { local key=$1; local ext_key="80${key}01"; local checksum=$(echo -n "$(echo -n "$ext_key" | xxd -r -p | sha256sum -b | awk '{print $1}' | xxd -r -p | sha256sum -b | awk '{print $1}')" | head -c 8); echo -n "$(echo -n "$ext_key$checksum" | xxd -r -p | base58)"; }
bin2hex() { local bin="$1"; local hex=""; while (( (i + ${#bin}) % 4 != 0 )); do bin="0$bin"; done; for ((i = 0; i < ${#bin}; i += 4)); do chunk="${bin:i:4}"; case "$chunk" in 0000) hex+="0" ;; 0001) hex+="1" ;; 0010) hex+="2" ;; 0011) hex+="3" ;; 0100) hex+="4" ;; 0101) hex+="5" ;; 0110) hex+="6" ;; 0111) hex+="7" ;; 1000) hex+="8" ;; 1001) hex+="9" ;; 1010) hex+="a" ;; 1011) hex+="b" ;; 1100) hex+="c" ;; 1101) hex+="d" ;; 1110) hex+="e" ;; 1111) hex+="f" ;; *) echo "Invalid binary input: $chunk"; return 1 ;; esac; done; echo -n "$hex"; }

wordsinfo() {
local words="${1,,}"
local xprv=$(words2xprv "$tmp")
local yprv=$(words2yprv "$tmp")
local zprv=$(words2zprv "$tmp")
local xpub=$(words2xpub "$tmp")
local ypub=$(words2ypub "$tmp")
local zpub=$(words2zpub "$tmp")
local pbkdf2=$(words2pbkdf2 "$tmp")
local pbkdf2key=$(echo "$pbkdf2" | cut -c 1-64)
local pbkdf2chn=$(echo "$pbkdf2" | cut -c 65-128)
local hex64=$(words2Hex64 "$tmp")
local pub=$(words2pub "$tmp")

echo -e "
Words=      $words
Pbkdf2=     $pbkdf2
Pbkdf2Chn=  $pbkdf2chn
Pbkdf2Key=  $pbkdf2key
PubKey=     $pub
Xprv=       $xprv
Yprv=       $yprv
Zprv=       $zprv
Xpub=       $xpub
Ypub=       $ypub
Zpub=       $zpub
*NOTES*
  x=  p2pkh=  bip44=  m/44'/0'/0'/0/0
  y=  p2pkh=  bip49=  m/49'/0'/0'/0/0
  z=  p2pkh=  bip84=  m/84'/0'/0'/0/0
"; }

hex64info() {
local Hex64="${1,,}"
local mnemonic=$(Hex64_to_mnemonic "$Hex64")
local pbkdf2=$(Hex64_TO_pbkdf2 "$Hex64")
local WIF=$(Hex64_TO_WIF "$Hex64")
local xprv=$(Hex64_TO_xprv "$Hex64")
local yprv=$(Hex64_TO_yprv "$Hex64")
local zprv=$(Hex64_TO_zprv "$Hex64")
local xpub=$(Hex64_TO_xpub "$Hex64")
local ypub=$(Hex64_TO_ypub "$Hex64")
local zpub=$(Hex64_TO_zpub "$Hex64")
local PubKeyHex130=$(Hex64_TO_PubKeyHex130 "$Hex64")
local PubKeyHex66=$(Hex64_TO_PubKeyHex66 "$Hex64")
local Addr=$(Hex64_TO_Addr "$Hex64")
local Addr2=$(Hex64_TO_Addr2 "$Hex64")
local Addr3=$(Hex64_TO_Addr3 "$Hex64")

echo -e "
Words=    $mnemonic
Hex64=    $Hex64
Wif=      $WIF
Pbkdf2=   $pbkdf2
PubKey=   $PubKeyHex66
Xprv=     $xprv
Yprv=     $yprv
Zprv=     $zprv
Xpub=     $xpub
Ypub=     $ypub
Zpub=     $zpub
P2PKH=    $Addr\n$(balnvol $Addr)
P2WPKH=   $Addr2\n$(balnvol $Addr2)
P2SH=     $Addr3\n$(balnvol $Addr3)
"; }

#=== python funtions =====================================================================================
Hex64Rand() { python3 -c "import secrets; print(secrets.token_hex(32))"; }
#######

words2Hex64() {
  python3 -c "
import sys
import binascii
from mnemonic import Mnemonic

def mnemonic_to_hex64(mnemonic):
    mnemo = Mnemonic('english')
    seed = mnemo.to_seed(mnemonic, passphrase='')
    hex_key = binascii.hexlify(seed[:32]).decode()  # Taking the first 32 bytes (64 hex characters)
    return hex_key

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: mnemonic_to_Hex64 <mnemonic>')
        sys.exit(1)

    mnemonic = sys.argv[1]
    hex64 = mnemonic_to_hex64(mnemonic)
    print(hex64)" "$1"
} #######


words2pbkdf2() {
  python3 -c "
import sys
import hashlib
import binascii

def mnemonic_to_seed(mnemonic, passphrase=''):
    mnemonic = mnemonic.encode('utf-8')
    salt = ('mnemonic' + passphrase).encode('utf-8')
    seed = hashlib.pbkdf2_hmac('sha512', mnemonic, salt, 2048, dklen=64)
    return binascii.hexlify(seed).decode()

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: mnemonic_to_pbkdf2 <mnemonic>')
        sys.exit(1)

    mnemonic = sys.argv[1]
    passphrase = ''  # Empty passphrase
    output = mnemonic_to_seed(mnemonic, passphrase)
    print(output)" "$1"
} #######

Hex64_TO_pbkdf2() {
  python3 -c "
import sys
import hashlib
import binascii
from mnemonic import Mnemonic

def mnemonic_to_seed(mnemonic, passphrase=''):
    mnemonic = mnemonic.encode('utf-8')
    salt = ('mnemonic' + passphrase).encode('utf-8')
    seed = hashlib.pbkdf2_hmac('sha512', mnemonic, salt, 2048, dklen=64)
    return binascii.hexlify(seed).decode()

def hex_to_mnemonic(hex_key):
    mnemo = Mnemonic('english')
    entropy = bytes.fromhex(hex_key)
    mnemonic = mnemo.to_mnemonic(entropy)
    return mnemonic

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: Hex64_TO_pbkdf2 <hex_key>')
        sys.exit(1)

    hex_key = sys.argv[1]
    mnemonic = hex_to_mnemonic(hex_key)
    passphrase = ''  # Empty passphrase
    seed = mnemonic_to_seed(mnemonic, passphrase)
    print(seed)" "$1"
} #######
Hex64_to_mnemonic() {
  python3 -c "
import sys
from mnemonic import Mnemonic

def hex_to_mnemonic(hex_key):
    mnemo = Mnemonic('english')
    entropy = bytes.fromhex(hex_key)
    mnemonic = mnemo.to_mnemonic(entropy)
    return mnemonic

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: Hex64_to_mnemonic <hex_key>')
        sys.exit(1)

    hex_key = sys.argv[1]
    mnemonic = hex_to_mnemonic(hex_key)
    print(mnemonic)" "$1"
} #######
Hex64_TO_xprv() {
  python3 -c "
import sys
import binascii
from bip32utils import BIP32Key

def hex64_to_xprv(hex_key):
    try:
        priv_key_bin = binascii.unhexlify(hex_key)
        bip32_key = BIP32Key.fromEntropy(priv_key_bin)
        print(bip32_key.ExtendedKey(private=True))
    except Exception as e:
        print(f'Error: {e}')

hex_key = sys.argv[1]
hex64_to_xprv(hex_key)" "$1"
} #######
Hex64_TO_xpub() {
  python3 -c "
import sys
import binascii
from bip32utils import BIP32Key

def hex64_to_xpub(hex_key):
    try:
        priv_key_bin = binascii.unhexlify(hex_key)
        bip32_key = BIP32Key.fromEntropy(priv_key_bin)
        xprv = bip32_key.ExtendedKey(private=True)
        bip32_key = BIP32Key.fromExtendedKey(xprv)
        print(bip32_key.ExtendedKey(private=False))
    except Exception as e:
        print(f'Error: {e}')

hex_key = sys.argv[1]
hex64_to_xpub(hex_key)" "$1"
} #######
Hex64_TO_PubKeyHex130() {
  python3 -c "
import sys
from ecdsa import SigningKey, SECP256k1
key = SigningKey.from_string(bytes.fromhex(sys.argv[1]), curve=SECP256k1)
pub_key = key.verifying_key.to_string('uncompressed').hex()
print('04' + pub_key)" "$1"
} #######
Hex64_TO_PubKeyHex66() {
  python3 -c "
import sys
from ecdsa import SigningKey, SECP256k1
key = SigningKey.from_string(bytes.fromhex(sys.argv[1]), curve=SECP256k1)
print(key.verifying_key.to_string('compressed').hex())" "$1"
} #######
Hex64_TO_Addr() {
  python3 -c "
import sys, hashlib, base58
from Cryptodome.Hash import RIPEMD160
from ecdsa import SigningKey, SECP256k1
key = SigningKey.from_string(bytes.fromhex(sys.argv[1]), curve=SECP256k1)
pubkey = key.verifying_key.to_string('compressed').hex()
rmd = RIPEMD160.new()
rmd.update(hashlib.sha256(bytes.fromhex(pubkey)).digest())
print(base58.b58encode_check(b'\x00' + rmd.digest()).decode())" "$1"
} #######
Hex64_TO_Addr2() {
  python3 -c "
import sys, hashlib
from ecdsa import SigningKey, SECP256k1
from Cryptodome.Hash import RIPEMD160
from functools import reduce

GEN = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]

def bech32_polymod(values):
    chk = 1
    for v in values:
        b = chk >> 25
        chk = (chk & 0x1ffffff) << 5 ^ v
        for i in range(5):
            chk ^= GEN[i] if ((b >> i) & 1) else 0
    return chk

bech32_hrp_expand = lambda hrp: [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]
bech32_create_checksum = lambda hrp, data: [(bech32_polymod(bech32_hrp_expand(hrp) + data + [0, 0, 0, 0, 0, 0]) ^ 1) >> 5 * (5 - i) & 31 for i in range(6)]
bech32_encode = lambda hrp, data: hrp + '1' + ''.join('qpzry9x8gf2tvdw0s3jn54khce6mua7l'[d] for d in data + bech32_create_checksum(hrp, data))

def convertbits(data, frombits, tobits, pad=True):
    acc, bits, ret, maxv = 0, 0, [], (1 << tobits) - 1
    for value in data:
        if value < 0 or value >> frombits: return None
        acc = (acc << frombits) | value
        bits += frombits
        while bits >= tobits:
            bits -= tobits
            ret.append((acc >> bits) & maxv)
    if pad and bits: ret.append((acc << (tobits - bits)) & maxv)
    elif bits >= frombits or ((acc << (tobits - bits)) & maxv): return None
    return ret

key = SigningKey.from_string(bytes.fromhex(sys.argv[1]), curve=SECP256k1)
pubkey = key.verifying_key.to_string('compressed').hex()
sha256 = hashlib.sha256(bytes.fromhex(pubkey)).digest()
rmd = RIPEMD160.new(); rmd.update(sha256)
print(bech32_encode('bc', [0] + convertbits(rmd.digest(), 8, 5)))" "$1"
} #######
Hex64_TO_Addr3() {
  python3 -c "
import sys, hashlib, base58
from ecdsa import SigningKey, SECP256k1
from Cryptodome.Hash import RIPEMD160
key = SigningKey.from_string(bytes.fromhex(sys.argv[1]), curve=SECP256k1)
pubkey = key.verifying_key.to_string('compressed').hex()
script_pubkey = b'\x00' + bytes([len(hashlib.sha256(bytes.fromhex(pubkey)).digest())]) + hashlib.sha256(bytes.fromhex(pubkey)).digest()
rmd = RIPEMD160.new()
rmd.update(script_pubkey)
print(base58.b58encode_check(b'\x05' + rmd.digest()).decode())" "$1"
} #######

#=====vars==============================================
wordlistfile="$HOME/a-me/z-share/code/bitwords.txt"

#=== MMA ================================================================================================================================
mma:
clear; echo -e "================  M a i n  M e n u  ==========================================
( 1 ) Info    FROM  Hex64     (OLD)
( 2 ) Info    FROM  Random    (OLD)
( 3 ) Info    FROM  WIF       (OLD)
( 4 ) Info    FROM  String    (OLD)
( 5 ) Info    FROM  24_Words  (OLD)
( 6 ) TXT     FROM  QR.Camera (Camera)
( 7 ) TXT     FROM  QR.Image  (Clipboard)
( 8 ) QR      FROM  TXT       (Clipboard)
( 9 ) BAL     FROM  ADDR      IN  BASH
( 0 ) BAL     FROM  ADDR      IN  BROWSER
( - ) Readme
( q ) Xprv    FROM  WORDS
( w ) Yprv    FROM  WORDS
( e ) Zprv    FROM  WORDS
( r ) Xpub    FROM  WORDS
( t ) Ypub    FROM  WORDS
( y ) Zpub    FROM  WORDS
( u ) PBKDF2  FROM  WORDS
( i ) Hex64   FROM  WORDS
( o ) PubKey  FROM  WORDS
( p ) Info    FROM  WORDS
( \ ) EXIT"

read -rsn1 InKey; echo; InKey=${InKey,,}; clear; case "$InKey" in
'1') echo 'Input Private Key (HEX-64):'; read tmp; tmp=$(hex64info "$tmp"); clear; echo "$tmp"; toclip "$tmp"; crap;;
'2') tmp=$(Hex64Rand); tmp=$(hex64info "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'3') echo 'Enter WIF:   '; read tmp; tmp=$(WIF_TO_Hex64 "$tmp"); tmp=$(hex64info "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'4') echo 'Enter String:'; read tmp; tmp=$(Str_TO_Hex64 "$tmp"); tmp=$(hex64info "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'5') echo 'Enter 24_Word'; read tmp; for i in $tmp; do l1=$(grep -n -w "$i" "$wordlistfile" | cut -d: -f1); l2=$((l1 - 1)); l2bin=$(printf "%011d" $(echo "obase=2;$l2" | bc)); phbin+="$l2bin"; done; phbinnosum="${phbin:0:-8}"; tmp=$(bin2hex "$phbinnosum"); tmp=$(hex64info "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'6') tmp="$(CamQrToTxt)"; echo "$tmp"; toclip "$tmp"; crap;;
'7') tmp="$(ClipQrToTxt)"; echo "$tmp"; toclip "$tmp"; crap;;
'8') tmp="$(ClipTxtToQr)"; echo "$tmp"; toclip "$tmp"; crap;;
'9') echo 'Enter Address'; read tmp; balnvol "$tmp"; crap;;
'0') echo 'Enter Address'; read tmp; xdg-open "https://mempool.space/address/$tmp" >>/dev/null 2>&1 & disown;;
'-') jumpto readme;;
'q') echo 'Enter Phrase:'; read tmp; tmp=$(words2xprv "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'w') echo 'Enter Phrase:'; read tmp; tmp=$(words2yprv "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'e') echo 'Enter Phrase:'; read tmp; tmp=$(words2zprv "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'r') echo 'Enter Phrase:'; read tmp; tmp=$(words2xpub "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
't') echo 'Enter Phrase:'; read tmp; tmp=$(words2ypub "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'y') echo 'Enter Phrase:'; read tmp; tmp=$(words2zpub "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'u') echo 'Enter Phrase:'; read tmp; tmp=$(words2pbkdf2 "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'i') echo 'Enter Phrase:'; read tmp; tmp=$(words2Hex64 "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'o') echo 'Enter Phrase:'; read tmp; tmp=$(words2pub "$tmp"); echo "$tmp"; toclip "$tmp"; crap;;
'p') echo 'Enter Phrase:'; read tmp; tmp=$(wordsinfo "$tmp"); clear; echo "$tmp"; toclip "$tmp"; crap;;
'\')  exit 0;;
  *)  jumpto mma;;
esac; jumpto mma
#=== Jumpto Landings after mma ==========================================================================================================
mma1:
jumpto mma
###################################
readme:
echo -e "##--- LINUX DEPS ---##\n sudo apt install -y base58 python3-pip xclip qrencode zbar-tools v4l-utils fswebcam\n##--- PYTHON DEPS---## pip3 install base58 ecdsa pycryptodome bip32utils\n***   Need Mnemonic Word List File   @   $HOME/a-me/z-share/code/bitwords.txt   ***"
crap; jumpto mma
###################################
