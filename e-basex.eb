#!/usr/bin/env bash
# 20231222_13:50_est--EJR
#BaseX EJR: bitcoin calcs

#== FUNCTION ==============================================
pf1() {
local Pycode_IN="$1"; local Pycode_SRC=$(cat <<'PYEOF'
#!/usr/bin/env python3
import os, pyperclip, hashlib, base58, secrets, qrcode, subprocess, sys
from Crypto.Hash import RIPEMD160

# Secp256k1 Curve Parameters
a, b, p, n = 0, 7, 2**256 - 2**32 - 2**9 - 2**8 - 2**7 - 2**6 - 2**4 - 1, 115792089237316195423570985008687907852837564279074904382605163141518161494337
g = {'x': 55066263022277343669578718895168534326250603453777594175500187360389116729240, 'y': 32670510020758816978083085130507043184471273380659243275938904335757337482424}

#= FUNCTIONS ====================================
def modinv(a, m = p):
  a = a % m if a < 0 else a; prevy, y = 0, 1
  while a > 1:
    q = m // a; y, prevy = prevy - q * y, y; a, m = m % a, a
  return y

def double(point):
  slope = ((3 * point['x'] ** 2) * modinv((2 * point['y']))) % p; x = (slope ** 2 - (2 * point['x'])) % p; y = (slope * (point['x'] - x) - point['y']) % p
  return {'x': x, 'y': y}

def add(point1, point2):
  if point1 == point2:
    return double(point1)
  slope = ((point1['y'] - point2['y']) * modinv(point1['x'] - point2['x'])) % p; x = (slope ** 2 - point1['x'] - point2['x']) % p; y = ((slope * (point1['x'] - x)) - point1['y']) % p
  return {'x': x, 'y': y}

def multiply(k, point = g):
  current = point; binary = format(k, 'b')[1:]
  for char in binary:
    current = double(current)
    if char == '1':
      current = add(current, point)
  return current

def Prv_key_to_wif(Prv_key_hex):
  extended = "80" + Prv_key_hex + "01"; checksum = hashlib.sha256(hashlib.sha256(bytes.fromhex(extended)).digest()).digest()[:4]; extended_checksum = extended + checksum.hex(); wif = base58.b58encode(bytes.fromhex(extended_checksum)).decode()
  return wif

def hash160(data):
  binary = bytes.fromhex(data); sha256 = hashlib.sha256(binary).digest(); ripemd160 = RIPEMD160.new(); ripemd160.update(sha256); hash160_bytes = ripemd160.digest(); hash160_hex = hash160_bytes.hex()
  return hash160_hex

#= User Choice (1=User Input Key / 2=Gen. Key) ==
choice = sys.argv[1]
if choice == '1':
  PvKHex = input()
  if len(PvKHex) != 64:
    print("Invalid Prv key length."); exit()
elif choice == '2':
  prvkeybytes = secrets.token_bytes(32); PvKHex = prvkeybytes.hex()
else:
  print("Invalid choice."); exit()

#= PrvKey to bytes ==========================
prvkeybytes = bytes.fromhex(PvKHex)

#= PrvKey To PubKey ======================
prvkeyint = int.from_bytes(prvkeybytes, byteorder="big"); point = multiply(prvkeyint)

#= Pubic(x,y) to hex ============================
x = format(point['x'], '064x'); y = format(point['y'], '064x')

#= Compressed Pub key ========================
prefix = '02' if point['y'] % 2 == 0 else '03'; PbKHex = prefix + x

#= Hash160 of the Pub key ====================
PbKh160 = hash160(PbKHex); versioned_hash = '00' + PbKh160; checksum = hashlib.sha256(hashlib.sha256(bytes.fromhex(versioned_hash)).digest()).digest()[:4]; final_Addrs = versioned_hash + checksum.hex(); PbAddr = base58.b58encode(bytes.fromhex(final_Addrs)).decode()

#= Prv Key to WIF ===========================
wif = Prv_key_to_wif(PvKHex)

#= VARS =========================================
print(f"{PvKHex}|{wif}|{PbKHex}|{PbKh160}|{PbAddr}", flush=True)
PYEOF
)
local pycode_OUT=$(python3 -c "$Pycode_SRC" "$Pycode_IN")
IFS='|' read -r PvKHex wif PbKHex PbKh160 PbAddr <<< "$pycode_OUT"
}
#+++++++++++++++++++++++
jumpto() { local LV1=$1; local LV2=$(sed -n "/$LV1:/{:a;n;p;ba};" $0 | grep -v ':$'); sleep .1; eval "$LV2"; exit; }
crap() { sleep .2; read -n 1 -p '*ANY-KEY*'; echo; }
GetDeps() { for i in "${Dep_Apt[@]}"; do if ! dpkg -l | grep -q "^ii  $i "; then echo "Installing $i..."; sudo apt install -y "$i"; else echo "You Have $i"; fi; done; for i in "${Dep_Pip3[@]}"; do if ! pip3 show "$i" &> /dev/null; then echo "Installing $i..."; pip3 install "$i"; else echo "$i is already installed."; fi; done; }
toclip() { echo -n "$1" | xclip -selection clipboard; }
makeclipQR() { local In1=$(xclip -o -selection clipboard); if [ -z "$In1" ]; then echo "Clipboard is empty."; return 1; fi; echo "$In1"; qrencode -t ANSIUTF8 "$In1"; }
readclipQR() { xclip -selection clipboard -t image/png -o > /tmp/clipboard.png; local Out=$(zbarimg --quiet --raw /tmp/clipboard.png); echo "Decoded text from QR code:"; echo "$Out"; rm /tmp/clipboard.png; }
#+++++++++++++++++++++++
txt2ssl() { local In="$1"; local Out=$(echo -n "$In" | openssl aes-256-cbc -a -salt -pass pass:"$EncMsgPass" -pbkdf2); echo -n "$Out"; }
ssl2txt() { local In="$1"; local Out=$(echo -n "$In" | openssl aes-256-cbc -d -a -pass pass:"$EncMsgPass" -pbkdf2); echo -n "$Out"; }
txt2b64() { local In="$1"; local Out=$(echo -n "$In" | base64); echo -n "$Out"; }
b642txt() { local In="$1"; local Out=$(echo -n "$In" | base64 -d); echo -n "$Out"; }
hex2txt() { local In="$1"; In=${In,,}; In=$(echo -n $In | sed 's/ //g'); local Out=$(echo -n "$In" | xxd -r -p); echo -n "$Out"; }
txt2hex() { local In="$1"; local Out=$(echo -n "$In" | xxd -p | tr -d '\n'); echo -n "$Out"; }
#+++++++++++++++++++++++
b62hex() { local base6="$1"; local result=$(echo "obase=16; ibase=6; $base6" | bc | tr -d '\n\\'); result=${result,,}; echo -n "$result"; }
bin2dec() { local bin="$1"; local dec=""; dec=$(echo "ibase=2; $bin" | bc | tr -d '\n\\'); echo -n "$dec"; }
bin2hex() { local bin="$1"; local hex=""; while (( (i + ${#bin}) % 4 != 0 )); do bin="0$bin"; done; for ((i = 0; i < ${#bin}; i += 4)); do chunk="${bin:i:4}"; case "$chunk" in 0000) hex+="0" ;; 0001) hex+="1" ;; 0010) hex+="2" ;; 0011) hex+="3" ;; 0100) hex+="4" ;; 0101) hex+="5" ;; 0110) hex+="6" ;; 0111) hex+="7" ;; 1000) hex+="8" ;; 1001) hex+="9" ;; 1010) hex+="a" ;; 1011) hex+="b" ;; 1100) hex+="c" ;; 1101) hex+="d" ;; 1110) hex+="e" ;; 1111) hex+="f" ;; *) echo "Invalid binary input: $chunk"; return 1 ;; esac; done; echo -n "$hex"; }
dec2bin() { local dec="$1"; local hex=$(dec2hex "$dec"); local bin=$(hex2bin "$hex"); echo -n "$bin"; }
dec2hex() { local dec="$1"; local hex=""; hex=$(echo "ibase=10; obase=16; $dec" | bc); echo -n "${hex,,}"; }
dice() { local result=""; local roll=""; for ((i = 1; i <= 99; i++)); do clear; echo -e "Roll #$i (Last Roll Was=$roll)\nCurrent Results=$result\nRoll The Dice and Enter The Value\n[1-5 are normal 6=0]"; read -rsn1 roll; result="${result}${roll}"; done; echo -n "$result"; dice_OUT="$result"; }
hex2b6() { local IN=$(echo "$1" | rev); local dec=$(hex2dec "$IN"); local base6_number=$(echo "obase=6; $dec" | bc | tr -d '\n\\'); echo -n "$base6_number"; }
hex2bin() { local hex=$1; for ((i=0; i<${#hex}; i++)); do case ${hex:$i:1} in 0) echo -n "0000" ;; 1) echo -n "0001" ;; 2) echo -n "0010" ;; 3) echo -n "0011" ;; 4) echo -n "0100" ;; 5) echo -n "0101" ;; 6) echo -n "0110" ;; 7) echo -n "0111" ;; 8) echo -n "1000" ;; 9) echo -n "1001" ;; [Aa]) echo -n "1010" ;; [Bb]) echo -n "1011" ;; [Cc]) echo -n "1100" ;; [Dd]) echo -n "1101" ;; [Ee]) echo -n "1110" ;; [Ff]) echo -n "1111" ;; esac; done; }
hex2dec() { local hex="$1"; local bin=$(hex2bin "$hex"); local dec=$(bin2dec "$bin"); echo -n "$dec"; }
Sha256() { echo -n $1 | shasum -a 256 -0 | tr -d '\n\\'; }
wif2prv() { local IN="$1"; local OUT; OUT=$(echo -n "$IN" | base58 -d | xxd -p | tr -d '\n\\'); OUT=${OUT,,}; OUT=${OUT:2}; OUT=${OUT:0:64}; echo -n "$OUT"; }
#+++++++++++++++++++++++
ToLog() {
  clear
  echo
  touch "$PhFN"
  > "$PhFN"
  touch "$PhF"
  > "$PhF"
  local PhLN
  local PbAddrUrl="https://mempool.space/address/$PbAddr"
  local Tl1="$PvKHex"
  local Tl2=$(hex2bin $Tl1)
  local Tl3=$(Sha256 $Tl2 | awk '{print $1}' | cut -c1-2)
  local Tl4=$(hex2bin $Tl3)
  local Tl5=$Tl2$Tl4

  for (( i=0; i<${#Tl5}; i+=11 )); do
    Tl6=${Tl5:$i:11}
    echo $((2#${Tl6}))
  done > "$PhFN"

  while read PhLN; do
    PhLN=$((PhLN + 1))
    sed -n "${PhLN}p" "$bitwords"
  done < "$PhFN" > "$PhF"

  local PhStr=$(cat "$PhF" | tr '\n' ' ' | sed 's/ *$//')

  echo 'saving.......'
  touch $logF

  echo -e "=== $(date -u '+%Y-%m-%d %H:%M:%S') UTC === $(date '+%Y-%m-%d %H:%M:%S') LocalTime ===\n" >>$logF

  local TlData=("Private Key: $PvKHex" "WIF: $wif" "Public Key: $PbKHex" "Public Key Hash160: $PbKh160" "Address: $PbAddr" "URL (Bal): $PbAddrUrl")

  for i in "${TlData[@]}"; do
    qrencode -t ASCIIi "$i" >>$logF
    echo -e "\n⬆️ ${i%%:*}⬆️\n" >>$logF
  done

  echo -e "Prv Key:\n $PvKHex\n\nWIF:\n $wif\n\nPub Key:\n $PbKHex\n\nPub Key Hash160:\n $PbKh160\n\nPub Addrs:\n $PbAddr\n\nURL (Bal):\n $PbAddrUrl\n-----------------------------------------\nEntropy (bin):\n $Tl2\nChecksum:\n hex=$Tl3\n bin=$Tl4\nEntropy w/ Checksum (bin):\n $Tl5\n\n==== Your seed phrase is ====\n$PhStr\n............................................" >>$logF

  echo "**** Saved In File: $logF ****"
}

#+++++++++++++++++++++++
ToTerm() {
  clear
  echo
  touch "$PhFN"
  > "$PhFN"
  touch "$PhF"
  > "$PhF"
  local PhLN
  local PbAddrUrl="https://mempool.space/address/$PbAddr"
  toclip "$PbAddrUrl"
  local Tt1="$PvKHex"
  local Tt2=$(hex2bin $Tt1)
  local Tt3=$(Sha256 $Tt2 | awk '{print $1}' | cut -c1-2)
  local Tt4=$(hex2bin $Tt3)
  local Tt5=$Tt2$Tt4

  for (( i=0; i<${#Tt5}; i+=11 )); do
    Tt6=${Tt5:$i:11}
    echo $((2#${Tt6}))
  done > "$PhFN"

  while read PhLN; do
    PhLN=$((PhLN + 1))
    sed -n "${PhLN}p" "$bitwords"
  done < "$PhFN" > "$PhF"

  local PhStr=$(cat "$PhF" | tr '\n' ' ' | sed 's/ *$//')

  echo '=============== QR CODES =================='
  local TtData=("Private Key: $PvKHex" "WIF: $wif" "Public Key: $PbKHex" "Public Key Hash160: $PbKh160" "Address: $PbAddr" "URL (Bal): $PbAddrUrl")

  for i in "${TtData[@]}"; do
    qrencode -t ASCIIi "$i"
    echo -e "\n⬆️ ${i%%:*}⬆️\n"
  done

  echo -e "Prv Key:\n $PvKHex\n\nWIF:\n $wif\n\nPub Key:\n $PbKHex\n\nPub Key Hash160:\n $PbKh160\n\nAddrs:\n $PbAddr\n\nURL (Bal) [On Clipboard]:\n $PbAddrUrl\n-----------------------------------------\nEntropy (bin):\n $Tt2\nChecksum:\n hex=$Tt3\n bin=$Tt4\nEntropy w/ Checksum (bin):\n $Tt5\n\n==== Your seed phrase is ====\n$PhStr\n............................................"
}
#== VARS ==================================================
logF="$HOME/Desktop/basex.txt"
Dep_Pip3=(mnemonic ecdsa pycryptodome pyperclip qrcode base58)
Dep_Apt=(python3 minimodem base58 basez dc gnupg hashalot oathtool openssl qrencode ruby-ascii85 tesseract-ocr zbar-tools espeak festival flite imagemagick feh figlet python3-pip whiptail xclip yad zenity)
PhFN="/tmp/numbers.txt"
PhF="/tmp/seed_phrase.txt"
bitwords="$HOME/a-me/z-share/code/bitwords.txt"

EncMsgClip=""
EncMsgPass=""
txt2ssl_IN=""
txt2ssl_OUT=""
ssl2txt_IN=""
ssl2txt_OUT=""

txt2b64_IN=""
txt2b64_OUT=""
b642txt_IN=""
b642txt_OUT=""

hex2txt_IN=""
hex2txt_OUT=""
txt2hex_IN=""
txt2hex_OUT=""

humanrights=$(cat <<'humanrightsEOF'
Preamble

Whereas recognition of the inherent dignity and of the equal and inalienable rights of all members of the human family is the foundation of freedom, justice, and peace in the world,

Whereas disregard and contempt for human rights have resulted in barbarous acts which have outraged the conscience of mankind, and the advent of a world in which human beings shall enjoy freedom of speech and belief and freedom from fear and want has been proclaimed as the highest aspiration of the common people,

Whereas it is essential, if man is not to be compelled to have recourse, as a last resort, to rebellion against tyranny and oppression, that human rights should be protected by the rule of law,

Whereas it is essential to promote the development of friendly relations between nations,

Whereas the peoples of the United Nations have in the Charter reaffirmed their faith in fundamental human rights, in the dignity and worth of the human person and in the equal rights of men and women and have determined to promote social progress and better standards of life in larger freedom,

Whereas Member States have pledged themselves to achieve, in cooperation with the United Nations, the promotion of universal respect for and observance of human rights and fundamental freedoms,

Whereas a common understanding of these rights and freedoms is of the greatest importance for the full realization of this pledge,

Now, therefore,

The General Assembly

Proclaims this Universal Declaration of Human Rights as a common standard of achievement for all peoples and all nations, to the end that every individual and every organ of society, keeping this Declaration constantly in mind, shall strive by teaching and education to promote respect for these rights and freedoms and by progressive measures, national and international, to secure their universal and effective recognition and observance, both among the peoples of Member States themselves and among the peoples of territories under their jurisdiction.

Article 1

All human beings are born free and equal in dignity and rights. They are endowed with reason and conscience and should act towards one another in a spirit of brotherhood.

Article 2

Everyone is entitled to all the rights and freedoms set forth in this Declaration, without distinction of any kind, such as race, colour, sex, language, religion, political or other opinion, national or social origin, property, birth, or other status.

Furthermore, no distinction shall be made on the basis of the political, jurisdictional, or international status of the country or territory to which a person belongs, whether it be independent, trust, non-self-governing or under any other limitation of sovereignty.

Article 3

Everyone has the right to life, liberty, and security of person.

Article 4

No one shall be held in slavery or servitude; slavery and the slave trade shall be prohibited in all their forms.

Article 5

No one shall be subjected to torture or to cruel, inhuman, or degrading treatment or punishment.

Article 6

Everyone has the right to recognition everywhere as a person before the law.

Article 7

All are equal before the law and are entitled without any discrimination to equal protection of the law. All are entitled to equal protection against any discrimination in violation of this Declaration and against any incitement to such discrimination.

Article 8

Everyone has the right to an effective remedy by the competent national tribunals for acts violating the fundamental rights granted him by the constitution or by law.

Article 9

No one shall be subjected to arbitrary arrest, detention or exile.

Article 10

Everyone is entitled in full equality to a fair and public hearing by an independent and impartial tribunal, in the determination of his rights and obligations and of any criminal charge against him.

Article 11

(1) Everyone charged with a penal offence has the right to be presumed innocent until proved guilty according to law in a public trial at which he has had all the guarantees necessary for his defense.
(2) No one shall be held guilty of any penal offence on account of any act or omission which did not constitute a penal offence, under national or international law, at the time when it was committed. Nor shall a heavier penalty be imposed than the one that was applicable at the time the penal offence was committed.

Article 12

No one shall be subjected to arbitrary interference with his privacy, family, home or correspondence, nor to attacks upon his honour and reputation. Everyone has the right to the protection of the law against such interference or attacks.

Article 13

(1) Everyone has the right to freedom of movement and residence within the borders of each State.
(2) Everyone has the right to leave any country, including his own, and to return to his country.

Article 14

(1) Everyone has the right to seek and to enjoy in other countries asylum from persecution.
(2) This right may not be invoked in the case of prosecutions genuinely arising from non-political crimes or from acts contrary to the purposes and principles of the United Nations.

Article 15

(1) Everyone has the right to a nationality.
(2) No one shall be arbitrarily deprived of his nationality nor denied the right to change his nationality.

Article 16

(1) Men and women of full age, without any limitation due to race, nationality or religion, have the right to marry and to found a family. They are entitled to equal rights as to marriage, during marriage, and at its dissolution.
(2) Marriage shall be entered into only with the free and full consent of the intending spouses.
(3) The family is the natural and fundamental group unit of society and is entitled to protection by society and the State.

Article 17

(1) Everyone has the right to own property alone as well as in association with others.
(2) No one shall be arbitrarily deprived of his property.

Article 18

Everyone has the right to freedom of thought, conscience and religion; this right includes freedom to change his religion or belief, and freedom, either alone or in community with others and in public or private, to manifest his religion or belief in teaching, practice, worship and observance.

Article 19

Everyone has the right to freedom of opinion and expression; this right includes freedom to hold opinions without interference and to seek, receive and impart information and ideas through any media and regardless of frontiers.

Article 20

(1) Everyone has the right to freedom of peaceful assembly and association.
(2) No one may be compelled to belong to an association.

Article 21

(1) Everyone has the right to take part in the government of his country, directly or through freely chosen representatives.
(2) Everyone has the right to equal access to public service in his country.
(3) The will of the people shall be the basis of the authority of government; this will shall be expressed in periodic and genuine elections which shall be by universal and equal suffrage and shall be held by secret vote or by equivalent free voting procedures.

Article 22

Everyone, as a member of society, has the right to social security and is entitled to realization, through national effort and international cooperation and in accordance with the organization and resources of each State, of the economic, social and cultural rights indispensable for his dignity and the free development of his personality.

Article 23

(1) Everyone has the right to work, to free choice of employment, to just and favourable conditions of work and to protection against unemployment.
(2) Everyone, without any discrimination, has the right to equal pay for equal work.
(3) Everyone who works has the right to just and favourable remuneration ensuring for himself and his family an existence worthy of human dignity, and supplemented, if necessary, by other means of social protection.
(4) Everyone has the right to form and to join trade unions for the protection of his interests.

Article 24

Everyone has the right to rest and leisure, including reasonable limitation of working hours and periodic holidays with pay.

Article 25

(1) Everyone has the right to a standard of living adequate for the health and well-being of himself and of his family, including food, clothing, housing and medical care and necessary social services, and the right to security in the event of unemployment, sickness, disability, widowhood, old age or other lack of livelihood in circumstances beyond his control.
(2) Motherhood and childhood are entitled to special care and assistance. All children, whether born in or out of wedlock, shall enjoy the same social protection.

Article 26

(1) Everyone has the right to education. Education shall be free, at least in the elementary and fundamental stages. Elementary education shall be compulsory. Technical and professional education shall be made generally available and higher education shall be equally accessible to all on the basis of merit.
(2) Education shall be directed to the full development of the human personality and to the strengthening of respect for human rights and fundamental freedoms. It shall promote understanding, tolerance and friendship among all nations, racial or religious groups, and shall further the activities of the United Nations for the maintenance of peace.
(3) Parents have a prior right to choose the kind of education that shall be given to their children.

Article 27

(1) Everyone has the right freely to participate in the cultural, artistic and scientific life of the community, and to enjoy the arts and to share in scientific advancement and its benefits.
(2) Everyone has the right to the protection of the moral and material interests resulting from any scientific, literary or artistic production of which he is the author.

Article 28

Everyone is entitled to a social and international order in which the rights and freedoms set forth in this Declaration can be fully realized.

Article 29

(1) Everyone has duties to the community in which alone the free and full development of his personality is possible.
(2) In the exercise of his rights and freedoms, everyone shall be subject only to such limitations as are determined by law solely for the purpose of securing due recognition and respect for the rights and freedoms of others and of meeting the just requirements of morality, public order and the general welfare in a democratic society.
(3) These rights and freedoms may in no case be exercised contrary to the purposes and principles of the United Nations.

Article 30

Nothing in this Declaration may be interpreted as implying for any State, group or person any right to engage in any activity or to perform any act aimed at the destruction of any of the rights and freedoms set forth herein.
humanrightsEOF
)

Das_Tables=$(cat <<'AsciiEOF'
--ASCII TABLE------------------------------------------------------------------------------------------------
 _Dec______Hex_______Binary______B64______Oct______Char______________________________________________________
   0    |  00    |  0000 0000  |  A    |  000    |  NUL (Null)
   1    |  01    |  0000 0001  |  B    |  001    |  SOH (Start of Header)
   2    |  02    |  0000 0010  |  C    |  002    |  STX (Start of Text)
   3    |  03    |  0000 0011  |  D    |  003    |  ETX (End of Text)
   4    |  04    |  0000 0100  |  E    |  004    |  EOT (End of Transmission)
   5    |  05    |  0000 0101  |  F    |  005    |  ENQ (Enquiry)
   6    |  06    |  0000 0110  |  G    |  006    |  ACK (Acknowledgment)
   7    |  07    |  0000 0111  |  H    |  007    |  BEL (Bell)
   8    |  08    |  0000 1000  |  I    |  010    |  BS  (Backspace)
   9    |  09    |  0000 1001  |  J    |  011    |  TAB (Horizontal Tab)
  10    |  0A    |  0000 1010  |  K    |  012    |  LF  (Line Feed)
  11    |  0B    |  0000 1011  |  L    |  013    |  VT  (Vertical Tab)
  12    |  0C    |  0000 1100  |  M    |  014    |  FF  (Form Feed)
  13    |  0D    |  0000 1101  |  N    |  015    |  CR  (Carriage Return)
  14    |  0E    |  0000 1110  |  O    |  016    |  SO  (Shift Out)
  15    |  0F    |  0000 1111  |  P    |  017    |  SI  (Shift In)
  16    |  10    |  0001 0000  |  Q    |  020    |  DLE (Data Link Escape)
  17    |  11    |  0001 0001  |  R    |  021    |  DC1 (Device Control 1)
  18    |  12    |  0001 0010  |  S    |  022    |  DC2 (Device Control 2)
  19    |  13    |  0001 0011  |  T    |  023    |  DC3 (Device Control 3)
  20    |  14    |  0001 0100  |  U    |  024    |  DC4 (Device Control 4)
  21    |  15    |  0001 0101  |  V    |  025    |  NAK (Negative Acknowledgment)
  22    |  16    |  0001 0110  |  W    |  026    |  SYN (Synchronous Idle)
  23    |  17    |  0001 0111  |  X    |  027    |  ETB (End of Transmission Block)
  24    |  18    |  0001 1000  |  Y    |  030    |  CAN (Cancel)
  25    |  19    |  0001 1001  |  Z    |  031    |  EM  (End of Medium)
  26    |  1A    |  0001 1010  |  a    |  032    |  SUB (Substitute)
  27    |  1B    |  0001 1011  |  b    |  033    |  ESC (Escape)
  28    |  1C    |  0001 1100  |  c    |  034    |  FS  (File Separator)
  29    |  1D    |  0001 1101  |  d    |  035    |  GS  (Group Separator)
  30    |  1E    |  0001 1110  |  e    |  036    |  RS  (Record Separator)
  31    |  1F    |  0001 1111  |  f    |  037    |  US  (Unit Separator)
  32    |  20    |  0010 0000  |  g    |  040    |  SPACE
  33    |  21    |  0010 0001  |  h    |  041    |  !
  34    |  22    |  0010 0010  |  i    |  042    |  "
  35    |  23    |  0010 0011  |  j    |  043    |  #
  36    |  24    |  0010 0100  |  k    |  044    |  $
  37    |  25    |  0010 0101  |  l    |  045    |  %
  38    |  26    |  0010 0110  |  m    |  046    |  &
  39    |  27    |  0010 0111  |  n    |  047    |  '
  40    |  28    |  0010 1000  |  o    |  050    |  (
  41    |  29    |  0010 1001  |  p    |  051    |  )
  42    |  2A    |  0010 1010  |  q    |  052    |  *
  43    |  2B    |  0010 1011  |  r    |  053    |  +
  44    |  2C    |  0010 1100  |  s    |  054    |  ,
  45    |  2D    |  0010 1101  |  t    |  055    |  -
  46    |  2E    |  0010 1110  |  u    |  056    |  .
  47    |  2F    |  0010 1111  |  v    |  057    |  /
  48    |  30    |  0011 0000  |  w    |  060    |  0
  49    |  31    |  0011 0001  |  x    |  061    |  1
  50    |  32    |  0011 0010  |  y    |  062    |
  51    |  33    |  0011 0011  |  z    |  063    |  2
  52    |  34    |  0011 0100  |  0    |  064    |  3
  53    |  35    |  0011 0101  |  1    |  065    |  4
  54    |  36    |  0011 0110  |  2    |  066    |  5
  55    |  37    |  0011 0111  |  3    |  067    |  6
  56    |  38    |  0011 1000  |  4    |  070    |  7
  57    |  39    |  0011 1001  |  5    |  071    |  8
  58    |  3A    |  0011 1010  |  6    |  072    |  9
  59    |  3B    |  0011 1011  |  7    |  073    |  :
  60    |  3C    |  0011 1100  |  8    |  074    |  ;
  61    |  3D    |  0011 1101  |  9    |  075    |  <
  62    |  3E    |  0011 1110  |  +    |  076    |  =
  63    |  3F    |  0011 1111  |  /    |  077    |  >
  64    |  40    |  0100 0000  |  A    |  100    |  ?
  65    |  41    |  0100 0001  |  B    |  101    |  @
  66    |  42    |  0100 0010  |  C    |  102    |  A
  67    |  43    |  0100 0011  |  D    |  103    |  B
  68    |  44    |  0100 0100  |  E    |  104    |  C
  69    |  45    |  0100 0101  |  F    |  105    |  D
  70    |  46    |  0100 0110  |  G    |  106    |  E
  71    |  47    |  0100 0111  |  H    |  107    |  F
  72    |  48    |  0100 1000  |  I    |  110    |  G
  73    |  49    |  0100 1001  |  J    |  111    |  H
  74    |  4A    |  0100 1010  |  K    |  112    |  I
  75    |  4B    |  0100 1011  |  L    |  113    |  J
  76    |  4C    |  0100 1100  |  M    |  114    |  K
  77    |  4D    |  0100 1101  |  N    |  115    |  L
  78    |  4E    |  0100 1110  |  O    |  116    |  M
  79    |  4F    |  0100 1111  |  P    |  117    |  N
  80    |  50    |  0101 0000  |  Q    |  120    |  O
  81    |  51    |  0101 0001  |  R    |  121    |  P
  82    |  52    |  0101 0010  |  S    |  122    |  Q
  83    |  53    |  0101 0011  |  T    |  123    |  R
  84    |  54    |  0101 0100  |  U    |  124    |  S
  85    |  55    |  0101 0101  |  V    |  125    |  T
  86    |  56    |  0101 0110  |  W    |  126    |  U
  87    |  57    |  0101 0111  |  X    |  127    |  V
  88    |  58    |  0101 1000  |  Y    |  130    |  W
  89    |  59    |  0101 1001  |  Z    |  131    |  X
  90    |  5A    |  0101 1010  |  a    |  132    |  Y
  91    |  5B    |  0101 1011  |  b    |  133    |  Z
  92    |  5C    |  0101 1100  |  c    |  134    |  [
  93    |  5D    |  0101 1101  |  d    |  135    |  \
  94    |  5E    |  0101 1110  |  e    |  136    |  ]
  95    |  5F    |  0101 1111  |  f    |  137    |  ^
  96    |  60    |  0110 0000  |  g    |  140    |  _
  97    |  61    |  0110 0001  |  h    |  141    |  `
  98    |  62    |  0110 0010  |  i    |  142    |  a
  99    |  63    |  0110 0011  |  j    |  143    |  b
 100    |  64    |  0110 0100  |  k    |  144    |  c
 101    |  65    |  0110 0101  |  l    |  145    |  d
 102    |  66    |  0110 0110  |  m    |  146    |  e
 103    |  67    |  0110 0111  |  n    |  147    |  f
 104    |  68    |  0110 1000  |  o    |  150    |  g
 105    |  69    |  0110 1001  |  p    |  151    |  h
 106    |  6A    |  0110 1010  |  q    |  152    |  i
 107    |  6B    |  0110 1011  |  r    |  153    |  j
 108    |  6C    |  0110 1100  |  s    |  154    |  k
 109    |  6D    |  0110 1101  |  t    |  155    |  l
 110    |  6E    |  0110 1110  |  u    |  156    |  m
 111    |  6F    |  0110 1111  |  v    |  157    |  n
 112    |  70    |  0111 0000  |  w    |  160    |  o
 113    |  71    |  0111 0001  |  x    |  161    |  p
 114    |  72    |  0111 0010  |  y    |  162    |  q
 115    |  73    |  0111 0011  |  z    |  163    |  r
 116    |  74    |  0111 0100  |  0    |  164    |  s
 117    |  75    |  0111 0101  |  1    |  165    |  t
 118    |  76    |  0111 0110  |  2    |  166    |  u
 119    |  77    |  0111 0111  |  3    |  167    |  v
 120    |  78    |  0111 1000  |  4    |  170    |  w
 121    |  79    |  0111 1001  |  5    |  171    |  x
 122    |  7A    |  0111 1010  |  6    |  172    |  y
 123    |  7B    |  0111 1011  |  7    |  173    |  z
 124    |  7C    |  0111 1100  |  +    |  174    |  {
 125    |  7D    |  0111 1101  |  /    |  175    |  |
 126    |  7E    |  0111 1110  |  =    |  176    |  }
 127    |  7F    |  0111 1111  |  ?    |  177    |  DEL (Delete)
AsciiEOF
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# M E N U :  M M A
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma:
clear
echo '(1) Enter Prv Key'
echo '(2) Generate New Prv Key'
echo '(3) Dependency Installer'
echo '(4) Mnemonic Generator via Prv key ..REQUIRES A Prv KEY..'
echo '(5) Mnemonic 2 Prv Key             ..REQUIRES MNEMONIC..'
echo '(0) Base Converter Calculators'
echo '(-) En/Decrypt Messages'
echo '(N) Universal Declaration of Human Rights'
echo '(\) EXIT'; read -rsn1 InKey; echo; InKey=${InKey,,}; clear; case "$InKey" in
### CASES #########
'1') echo 'Enter Prv Key:'; pf1 '1'; jumpto mmb;;
'2') pf1 '2'; jumpto mmb;;
'3') GetDeps; crap;;
'4') jumpto mma4;;
'5') jumpto mma5;;
'0') jumpto mma0;;
'n') echo "$humanrights"; toclip "$humanrights"; crap;;
'-') jumpto mmam;;
'\') exit 0;; *) jumpto mma;; esac; jumpto mma
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmb:
clear
echo '(1) See Output'
echo "(2) See Output AND Save To $logF"
echo "(3) Just Save To $logF"
echo "(4) Delete $logF"
echo '(\) Back To Main Menu'; read -rsn1 InKey; echo; InKey=${InKey,,}; clear; case "$InKey" in
### CASES #########
'1') ToTerm;;
'2') ToLog; ToTerm;;
'3') ToLog;;
'4') rm "$logF";;
'\') jumpto mma;; *) jumpto mmb;; esac; crap; jumpto mmb
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma4:
clear
echo '==== PrvKey 2 Mnemonic ===='
echo '  FYI: (Requires File @ ~/a-me/z-share/code/bitwords.txt'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo 'Enter Hex Key:'
read Pv2Mn1
Pv2Mn2=$(hex2bin $Pv2Mn1)

if [ ${#Pv2Mn1} -eq 64 ]; then
  Pv2Mn3=$(Sha256 $Pv2Mn2 | awk '{print $1}' | cut -c1-2)
elif [ ${#Pv2Mn1} -eq 32 ]; then
  Pv2Mn3=$(Sha256 $Pv2Mn2 | awk '{print substr($1,1,1)}')
else
  clear
  echo 'Issue In Hex Length'
  sleep 2
  jumpto mma
fi

Pv2Mn4=$(hex2bin $Pv2Mn3)
Pv2Mn5=$Pv2Mn2$Pv2Mn4

for (( i=0; i<${#Pv2Mn5}; i+=11 )); do
  Pv2Mn6=${Pv2Mn5:$i:11}
  echo $((2#${Pv2Mn6}))
done > "$PhFN"

while read PhLN; do
  PhLN=$((PhLN + 1))
  sed -n "${PhLN}p" "$bitwords"
done < "$PhFN" > "$PhF"

PhStr=$(cat "$PhF" | tr '\n' ' ' | sed 's/ *$//')
toclip "$PhStr"

clear
echo -e "Prv Key (hex):\n $Pv2Mn1"
echo -e "Entropy (bin):\n $Pv2Mn2"
echo -e "Checksum:\n hex=$Pv2Mn3\n bin=$Pv2Mn4"
echo -e "Entropy w/ Checksum (bin):\n $Pv2Mn5"
echo -e "==== Your seed phrase (On ClipBoard Too) ===="
echo -e "$PhStr"
echo -e "Hit Enter When Ready"
read junk
jumpto mma
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma5:
clear
echo -e "==== Mnemonic 2 PrvKey ===="
echo "  FYI: (Requires File @ ~/a-me/z-share/code/bitwords.txt"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo -e "\nEnter Phrase:"
read Mn2Pv1
Mn2Pv2=""

for word in $Mn2Pv1; do
    PhLN=$(grep -n -w "$word" "$bitwords" | cut -d: -f1)
    PhLN=$((PhLN - 1))
    Mn2Pv2+=$(printf "%011d" $(echo "obase=2;$PhLN" | bc))
done

if [ ${#Mn2Pv2} -eq 264 ]; then
    Mn2Pv3="${Mn2Pv2:0:-8}"
elif [ ${#Mn2Pv2} -eq 132 ]; then
    Mn2Pv3="${Mn2Pv2:0:-4}"
else
    clear
    echo 'Length issue with words'
    sleep 2
    jumpto mma
fi

Mn2Pv4=$(bin2hex "$Mn2Pv3")
toclip "$Mn2Pv4"
clear

echo -e "Seed Phrase:\n $Mn2Pv1"
echo -e "Entropy w/ Checksum (bin):\n $Mn2Pv2"
echo -e "Entropy no Checksum (bin):\n $Mn2Pv3"
echo -e "Prv Key in hex (length= ${#Mn2Pv4}):\n $Mn2Pv4  <== [On Clipboard]"
echo -e "\nPLEASE RECORD THIS INFO MANUALLY"
echo "IT WILL DISAPPEAR WHEN YOU LEAVE"
echo "Hit Enter When Ready"
read junk
jumpto mma
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# M E N U :  M M A 0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma0:
clear
echo '== BASE Converter ==='
echo '(1) HEX 2 BIN'
echo '(2) HEX 2 DEC'
echo '(3) BIN 2 HEX'
echo '(4) BIN 2 DEC'
echo '(5) DEC 2 HEX'
echo '(6) DEC 2 BIN'

echo '(7) TXT 2 B64'
echo '(8) B64 2 TXT'
echo '(9) TXT 2 HEX'
echo '(0) HEX 2 TXT'

echo '(-)'
echo '(q) WIF 2 PRV (BASE58 WIF TO HEX Prv KEY)'
echo '(w) hex 2 b6 (hex TO base6)'
echo '(e) b6 2 hex (base6 to base16) [good for dice]'
echo '(r) roll dice as base6'
echo '(t) Binary 2 Sha_256'
echo '(\) EXIT'; read -rsn1 InKey; echo; InKey=${InKey,,}; clear; case "$InKey" in
### CASES #########
'1') jumpto mma01 ;;
'2') jumpto mma02 ;;
'3') jumpto mma03 ;;
'4') jumpto mma04 ;;
'5') jumpto mma05 ;;
'6') jumpto mma06 ;;

'7') jumpto mma07 ;;
'8') jumpto mma08 ;;
'9') jumpto mma09 ;;
'0') jumpto mma00 ;;
'-') jumpto mma0m ;;

'q') jumpto mma0q ;;
'w') jumpto mma0w ;;
'e') jumpto mma0e ;;
'r') jumpto mma0r ;;
't') jumpto mma0t ;;

'\') jumpto mma;; *) jumpto mma0 ;; esac
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma01:
hex2bin_IN=""
hex2bin_OUT=""

echo 'hex2bin: Enter Your Number'
read -r hex2bin_IN
hex2bin_IN=$(echo -n "$hex2bin_IN")

echo '.............................'
hex2bin_OUT=$(hex2bin "$hex2bin_IN")
toclip "$hex2bin_OUT"

echo -e "hex2bin  (Length= ${#hex2bin_OUT})\n  $hex2bin_OUT\n\n* Results Available On ClipBoard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma02:
hex2dec_IN=""
hex2dec_OUT=""

echo 'hex2dec: Enter Your Number'
read -r hex2dec_IN
hex2dec_IN=$(echo -n "$hex2dec_IN")

hex2dec_OUT=$(hex2dec "$hex2dec_IN")
toclip "$hex2dec_OUT"

echo -e "hex2dec  (Length= ${#hex2dec_OUT})\n  $hex2dec_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma03:
bin2hex_IN=""
bin2hex_OUT=""

echo 'bin2hex: Enter Your Number'
read -r bin2hex_IN
bin2hex_IN=$(echo -n "$bin2hex_IN")

bin2hex_OUT=$(bin2hex "$bin2hex_IN")
toclip "$bin2hex_OUT"

echo -e "bin2hex  (Length= ${#bin2hex_OUT})\n  $bin2hex_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma04:
bin2dec_IN=""
bin2dec_OUT=""

echo 'bin2dec: Enter Your Number'
read -r bin2dec_IN
bin2dec_IN=$(echo -n "$bin2dec_IN")

bin2dec_OUT=$(bin2dec "$bin2dec_IN")
toclip "$bin2dec_OUT"

echo -e "bin2dec  (Length= ${#bin2dec_OUT})\n  $bin2dec_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma05:
dec2hex_IN=""
dec2hex_OUT=""

echo 'dec2hex: Enter Your Number'
read -r dec2hex_IN
dec2hex_IN=$(echo -n "$dec2hex_IN")

dec2hex_OUT=$(dec2hex "$dec2hex_IN")
toclip "$dec2hex_OUT"

echo -e "dec2hex  (Length= ${#dec2hex_OUT})\n  $dec2hex_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma06:
dec2bin_IN=""
dec2bin_OUT=""

echo 'dec2bin: Enter Your Number'
read -r dec2bin_IN
dec2bin_IN=$(echo -n "$dec2bin_IN")

dec2bin_OUT=$(dec2bin "$dec2bin_IN")
toclip "$dec2bin_OUT"

echo -e "dec2bin  (Length= ${#dec2bin_OUT})\n  $dec2bin_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma07:
txt2b64_IN=""
txt2b64_OUT=""

echo 'TXT 2 B64: Enter Your Text'
read -r txt2b64_IN
txt2b64_IN=$(echo -n "$txt2b64_IN")

txt2b64_OUT=$(txt2b64 "$txt2b64_IN")
toclip "$txt2b64_OUT"

echo -e "txt2b64  (Length= ${#txt2b64_OUT})\n  $txt2b64_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma08:
b642txt_IN=""
b642txt_OUT=""

echo 'B64 2 TXT: Enter Your Text'
read -r b642txt_IN
b642txt_IN=$(echo -n "$b642txt_IN")

b642txt_OUT=$(b642txt "$b642txt_IN")
toclip "$b642txt_OUT"

echo -e "b642txt  (Length= ${#b642txt_OUT})\n  $b642txt_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma09:
txt2hex_IN=""
txt2hex_OUT=""

echo 'TXT 2 HEX: Enter Your Text'
read -r txt2hex_IN
txt2hex_IN=$(echo -n "$txt2hex_IN")

txt2hex_OUT=$(txt2hex "$txt2hex_IN")
toclip "$txt2hex_OUT"

echo -e "txt2hex  (Length= ${#txt2hex_OUT})\n  $txt2hex_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma00:
hex2txt_IN=""
hex2txt_OUT=""

echo 'HEX 2 TXT: Enter Your Text'
read -r hex2txt_IN
hex2txt_IN=$(echo -n "$hex2txt_IN")

hex2txt_OUT=$(hex2txt "$hex2txt_IN")
toclip "$hex2txt_OUT"

echo -e "hex2txt  (Length= ${#hex2txt_OUT})\n  $hex2txt_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma0m:
jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma0q:
wif2prv_IN=""
wif2prv_OUT=""

echo 'WIF 2 PRV (BASE58 WIF TO HEX Prv KEY)'
read -r wif2prv_IN
wif2prv_IN=$(echo -n "$wif2prv_IN")

wif2prv_OUT=$(wif2prv "$wif2prv_IN")
toclip "$wif2prv_OUT"

echo -e "WIF 2 PRV  (Length= ${#wif2prv_OUT})\n  $wif2prv_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma0w:
hex2b6_IN=""
hex2b6_OUT=""

echo 'hex to b6'
read -r hex2b6_IN
hex2b6_IN=$(echo -n "$hex2b6_IN")

hex2b6_OUT=$(hex2b6 "$hex2b6_IN")
toclip "$hex2b6_OUT"

echo -e "hex to b6 (Length= ${#hex2b6_OUT})\n  $hex2b6_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma0e:
b62hex_IN=""
b62hex_OUT=""

echo 'b6 to hex (use with dice too [6 on di is 0, 99 rolls]'
read -r b62hex_IN
b62hex_IN=$(echo -n "$b62hex_IN")

b62hex_OUT=$(b62hex "$b62hex_IN")
toclip "$b62hex_OUT"

echo -e "b6 to hex (Length= ${#b62hex_OUT})\n  $b62hex_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma0r:
dice_IN=""
dice_OUT=""

clear
dice
toclip "$dice_OUT"

echo -e "\n----------------------------------------\nDice As Base 6 (Length= ${#dice_OUT})\n  $dice_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mma0t:
bin2sha256_IN=""
bin2sha256_OUT=""

echo 'Enter binary to be checksummed:'
read -r bin2sha256_IN
bin2sha256_IN=$(echo -n "$bin2sha256_IN")

bin2sha256_OUT=$(Sha256 "$bin2sha256_IN")
toclip "$bin2sha256_OUT"

echo -e "Your Checmsum (Length= ${#bin2sha256_OUT})\n  $bin2sha256_OUT\n\n* Results Available On Clipboard *"
crap

jumpto mma0

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# M E N U :  M M A M
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam:
clear
echo "Current Password: $EncMsgPass"
echo '== Message En/DeCrypter'
echo ' 1 - Enter Password (run 1st)'
echo ' 2 - Encrypt (OpenSSL)'
echo ' 3 - Decrypt (OpenSSL)'
echo ' 4 - Encrypt (base64)'
echo ' 5 - Decrypt (base64)'
echo ' 6 - hex2txt'
echo ' 7 - txt2hex'
echo ' 8 - See Tables'
echo ' 9 - Make Clip QR'
echo ' 0 - Read Clip QR'
echo ' - - Status'
echo ' \ - Exit'
read -rsn1 InKey; echo; InKey=${InKey,,}; clear; case "$InKey" in
### CASES #########
'1') jumpto mmam1 ;;
'2') jumpto mmam2 ;;
'3') jumpto mmam3 ;;
'4') jumpto mmam4 ;;
'5') jumpto mmam5 ;;
'6') jumpto mmam6 ;;
'7') jumpto mmam7 ;;
'8') jumpto mmam8 ;;
'9') jumpto mmam9 ;;
'0') jumpto mmam0 ;;
'-') jumpto mmamm ;;
'\') jumpto mma;; *) jumpto mmam ;; esac
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam1:
EncMsgPass=""

echo -e "Enter password:"
read -r EncMsgPass
EncMsgPass=$(echo -n "$EncMsgPass")

jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam2:
txt2ssl_IN=""
txt2ssl_OUT=""

echo -e "Enter Raw Message (Press Ctrl+D On New Line When Done):"

while IFS= read -r line; do
  txt2ssl_IN="${txt2ssl_IN}${line}"$'\n'
done

txt2ssl_IN=$(echo -n "$txt2ssl_IN")
txt2ssl_OUT=$(txt2ssl "$txt2ssl_IN")
toclip "$txt2ssl_OUT"

clear
echo -e "Encrypted Message (also on clipboard now):\n\n$txt2ssl_OUT"
crap

jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam3:
ssl2txt_IN=""
ssl2txt_OUT=""

echo -e "What's the encrypted message you want to decode?"
read -r ssl2txt_IN
ssl2txt_IN=$(echo -n "$ssl2txt_IN")

ssl2txt_OUT=$(ssl2txt "$ssl2txt_IN")
toclip "$ssl2txt_OUT"

clear
echo -e "Decrypted Message (also on clipboard now):\n\n$ssl2txt_OUT"
crap

jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam4:
txt2b64_IN=""
txt2b64_OUT=""

echo -e "Enter Raw Message (Press Ctrl+D On New Line When Done):"

while IFS= read -r line; do
  txt2b64_IN="${txt2b64_IN}${line}"$'\n'
done

txt2b64_IN=$(echo -n "$txt2b64_IN")
txt2b64_OUT=$(txt2b64 "$txt2b64_IN")
toclip "$txt2b64_OUT"

clear
echo -e "Encrypted Message (also on clipboard now):\n\n$txt2b64_OUT"
crap

jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam5:
b642txt_IN=""
b642txt_OUT=""

echo -e "What's the encrypted message you want to decode?"
read -r b642txt_IN
b642txt_IN=$(echo -n "$b642txt_IN")

b642txt_OUT=$(b642txt "$b642txt_IN")
toclip "$b642txt_OUT"

clear
echo -e "Decrypted Message (also on clipboard now):\n\n$b642txt_OUT"
crap

jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam6:
txt2hex_IN=""
txt2hex_OUT=""

echo -e "Enter Raw Message (Press Ctrl+D On New Line When Done):"

while IFS= read -r line; do
  txt2hex_IN="${txt2hex_IN}${line}"$'\n'
done

txt2hex_IN=$(echo -n "$txt2hex_IN")
txt2hex_OUT=$(txt2hex "$txt2hex_IN")
toclip "$txt2hex_OUT"

clear
echo -e "Decrypted Message (also on clipboard now):\n\n$txt2hex_OUT"
crap

jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam7:
hex2txt_IN=""
hex2txt_OUT=""

echo -e "Enter Hex Message (Press Ctrl+D On New Line When Done):"

while IFS= read -r line; do
  hex2txt_IN="${hex2txt_IN}${line}"$'\n'
done

hex2txt_IN=$(echo -n "$hex2txt_IN")
hex2txt_OUT=$(hex2txt "$hex2txt_IN")
toclip "$hex2txt_OUT"

clear
echo -e "Encrypted Message (also on clipboard now):\n\n$hex2txt_OUT"
crap

jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam8:
echo "$Das_Tables"
crap
jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam9:
makeclipQR
crap
jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmam0:
readclipQR
crap
jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmamm:
EncMsgClip=$(xclip -o -selection clipboard)
sleep .1
clear
echo -e "
=========Status Report From En/Decoder  ============
****Password****
$EncMsgPass
---------------------------------------
****EnCryptSSL Input****
$txt2ssl_IN
****EnCryptSSL Output****
$txt2ssl_OUT
****DeCryptSSL Input****
$ssl2txt_IN
****DeCryptSSL Output****
$ssl2txt_OUT
---------------------------------------
****EnCrypt64 Input****
$txt2b64_IN
****EnCrypt64 Output****
$txt2b64_OUT
****DeCrypt64 Input****
$b642txt_IN
****DeCrypt64 Output****
$b642txt_OUT
---------------------------------------
****txt2hex Input****
$txt2hex_IN
****txt2hex Output****
$txt2hex_OUT
****hex2txt Input****
$hex2txt_IN
****hex2txt Output****
$hex2txt_OUT
---------------------------------------
****ClipBoard****
$EncMsgClip
---------------------------------------
"
crap
jumpto mmam
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~